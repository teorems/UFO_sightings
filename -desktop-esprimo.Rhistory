rev_geo <- function(req) {
p <- progressor(along = req)
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
with_progress(df <- future_map_dfr(api_calls[1:1000], ~rev_geo(.)))
rev_geo <- function(req) {
p <- progressor(req)
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
places <- future_map_dfr(data, ~rev_geo(.))}
myfcn <-function(data){
p <- progressor(along = data)
places <- future_map_dfr(data, ~rev_geo(.))
}
with_progress(mfcn(req[1:10]))
with_progress(myfcn(req[1:10]))
with_progress(myfcn(req[1:1000]))
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
myfcn <-function(data){
p <- progressor(along = data)
places <- future_map_dfr(data, ~rev_geo(.))
}
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
myfcn <-function(data){
p <- progressor(along = data)
places <- future_map_dfr(data, ~rev_geo(.))
}
with_progress(myfcn(req[1:1000]))
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js$address$country)){
js$address$country
} else { NA }
}else {NA}
}
countries <- purrr::map_chr(req[1:10], rev_geo)
library(httr)
nominatim <- "https://nominatim.openstreetmap.org/reverse?"
lat = UFO$lat
lon = UFO$lon
req <- paste0(nominatim,"lat=", lat, "&", "lon=", lon, "&", "format=json")
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js$address$country)){
js$address$country
} else { NA }
}else {NA}
}
countries <- purrr::map_chr(req[1:10], rev_geo)
rev_geo <- function(req) {
p <- progressor(along = req)
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js$address$country)){
js$address$country
} else { NA }
}else {NA}
}
countries <- purrr::map_chr(req[1:10], with_progress(rev_geo))
countries
with_progress(countries <- purrr::map_chr(req[1:10], (rev_geo)))
with_progress(countries <- purrr::map_chr(req[1:100], (rev_geo)))
handlers("progress")
with_progress(countries <- purrr::map_chr(req[1:100], rev_geo))
with_progress(countries <- purrr::map_chr(req[1:100], ~rev_geo(.)))
purrr::map_chr(req[1:10], ~rev_geo(.))
source("C:/Users/teore/OneDrive/RProjects/UFO_sightings/geocoding.R", echo=TRUE)
with_progress(countries <- purrr::map_chr(req[1:100], ~rev_geo(.)))
with_progress({
countries <- purrr::map_chr(req[1:100], ~rev_geo(.))
})
library(httr)
nominatim <- "https://nominatim.openstreetmap.org/reverse?"
lat = UFO$lat
lon = UFO$lon
req <- paste0(nominatim,"lat=", lat, "&", "lon=", lon, "&", "format=json")
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js$address$country)){
js$address$country
} else { NA }
}else {NA}
}
countries <- purrr::map_chr(req[1:100], ~rev_geo(.))
source("C:/Users/teore/OneDrive/RProjects/UFO_sightings/geocoding.R", echo=TRUE)
load("UFO.RData")
source("C:/Users/teore/OneDrive/RProjects/UFO_sightings/geocoding.R", echo=TRUE)
library(httr)
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
df <- future_map_dfr(api_calls, ~rev_geo(.), .progress = TRUE)
nominatim <- "https://nominatim.openstreetmap.org/reverse?"
lat = UFO$lat
lon = UFO$lon
api_calls <- paste0(nominatim,"lat=", lat, "&", "lon=", lon, "&", "format=json")
library(httr)
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
df <- furrr::future_map_dfr(api_calls, ~rev_geo(.), .progress = TRUE)
df <- furrr::future_map_dfr(api_calls[1:10], ~rev_geo(.), .progress = TRUE)
library(httr)
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
as.data.frame(js$address)
} else { NA }
}else {NA}
}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
df <- furrr::future_map_dfr(api_calls[1:10], ~rev_geo(.), .progress = TRUE)
df
assertthat::not_empty("x")
x
exists("x")
df
r <- GET(req[1])
content(r)
r$pino
as.data.frame(r$pino)
dfs <- list(as.data.frame(r$pino), iris)
dfs
map_df(dfs, rbind)
js
r
content(r)
content(r) -> c
c$address
assertthat::not_empty(js$address)
assertthat::not_empty(r$gino)
assertthat::not_empty(r)
slow_sum <- function(x) {
p <- progressr::progressor(along = x)
sum <- 0
for (kk in seq_along(x)) {
Sys.sleep(0.1)
sum <- sum + x[kk]
p(message = sprintf("Added %g", x[kk]))
}
sum
}
> y <- slow_sum(1:10)
> y
[1] 55
>
with_progress(y <- slow_sum(1:10))
library(progressr)
with_progress(y <- slow_sum(1:10))
GET(req)
GET(req[1])
source("C:/Users/teore/OneDrive/RProjects/UFO_sightings/divideandconquer.R", echo=TRUE)
nominatim <- "https://nominatim.openstreetmap.org/reverse?"
lat = UFO$lat
lon = UFO$lon
api_calls <- paste0(nominatim,"lat=", lat, "&", "lon=", lon, "&", "format=json")
library(httr)
library(furrr)
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js)){
return(as.data.frame(js$address))
} else { NA }
}else {NA}
}
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
df <- future_map_dfr(api_calls[1:10], ~rev_geo(.), .progress = TRUE)
df
rev_geo <- function(req) {
r <- GET(req)
if (http_error(r) == FALSE) {
js <- content(r)
if (assertthat::not_empty(js$address)){
return(as.data.frame(js$address))
} else {return(list(empty = "Yes"))}
}else {return(list(empty = "Yes"))}
}
df <- future_map_dfr(api_calls[1:100], ~rev_geo(.), .progress = TRUE)
View(df)
assertthat::not_empty(pino$uh)
r
assertthat::not_empty(r$uh)
df <- future_map_dfr(api_calls[1:100], ~rev_geo(.), .progress = TRUE)
availableCores()
n_cores <- availableCores()
plan(multisession, workers = n_cores)
system.time(
df <- future_map_dfr(api_calls[1:100], ~rev_geo(.), .progress = TRUE)
)
n_cores <- availableCores() - 1
plan(multisession, workers = n_cores)
system.time(
df <- future_map_dfr(api_calls[1:100], ~rev_geo(.), .progress = TRUE)
)
system.time(
df <- purrr::map_df(api_calls[1:100], ~rev_geo(.), .progress = TRUE)
)
plan(multisession, workers = n_cores)
library(rvest)
?rverst::
?rvest
curl::curl(api_calls[1])
curl::curl(api_calls[1]) -> r
readLines(r)
class(r)
jsonlite::fromJSON(readLines(r))
r
r <- GET(req)
r <- GET(req[1])
r
purrr::map(req[1:100], ~GET(.))
curl(req[1]) ->r
curl::curl(req[1]) ->r
r
readLines(r)
?curl
system.time(furrr::future_map(req[1:100], ~curl::curl(.)))
con <- curl("https://httpbin.org/get")
readLines(con)
system.time(f <- purrr::map(req[1:100], ~GET(.)))
system.time(s <- furrr::future_map(req[1:100], ~GET(.)))
system.time(l <- furrr::future_map(req[1:100], ~curl::curl(.)))
l
future_map(req[1:100], ~curl::curl(.))
future_imap(req[1:100], ~curl::curl(.))
curl::curl(req[1])
# Get command line argument
arguments <- commandArgs(trailingOnly = TRUE)
process_number <- as.numeric(arguments[1])
load("api_calls.RData")
# work out which API calls each R script should make (e.g.
indicies <- seq(process_number, nrow(api_calls), 10)
load("UFO.RData")
places <- purrr::map_df(dir(pattern = "places"), read.csv)
rlang::last_error()
rlang::last_trace()
places <- purrr::map_df(dir(pattern = "places"), read.csv, colClasses = "character")
View(places)
places <- purrr::map_df(dir(pattern = "places"), read.csv, colClasses = "character")
View(places)
library(dplyr)
View(UFO)
places[80283,]
UFO[80283,]
p1 <- read.csv("places1.csv")
p1 <- read.csv("places3.csv")
length(26779:53555)
length(1:2)
length(1:10)
UFO[26779,]
p1[1,]
p1 <- read.csv("places3.csv")
p1[1,]
p1[1,] %>% View()
UFO[26779,]
UFO[26779,]["lon","lat"]
UFO[26779,][["lon","lat"]]
UFO[26779,][c("lon","lat")]
load("C:/Users/DELL/OneDrive/RProjects/UFO_sightings/api_calls.RData")
api_calls[26779]
content(GET(api_calls[26779]))
library(httr)
content(GET(api_calls[26779]))
UFO[26779,] %>% View()
p1[1,] %>% View(p1)
p1[1,] %>% View("p1")
P1[2,]
p1[2,]
length(53555:nrow(UFO))
UFO([53555,])
UFO[53555,]
UFO[60000,]
p1[60000,]
p1[60001,]
p1[61000,]
p1[70000,]
library(naniar)
install.packages("naniar")
naniar::gg_miss_case(p1)
naniar::prop_miss_case(p1)
p1[1]
library(dplyr)
rowwise(p1, is.na)
rowwise(p1, sum(is.na))
naniar::all_miss(p1)
naniar::miss_case_summary(p1)
naniar::miss_case_summary(p1) |> arrange(case)
naniar::miss_case_summary(p1) |> arrange(case) |> View()
p1[13332,]
53555 + 15000
UFO[68555,]
p1[15000,]
p1[14999,]
p1[15001,]
13000 / 60
r <- content(GET(api_calls[26779]))
r
cbind(r$lat, r$lon)
cbind(lat = r$lat, lon = r$lon)
cbind(lat = r$lat, lon = r$lon, as.data.frame(r$address))
places <- purrr::map_df(dir(pattern = "places"), read.csv)
load("C:/Users/teore/OneDrive/RProjects/UFO_sightings/UFO.RData")
View(places)
View(UFO)
places[c("town","city")]
sel <-places[c("town","city")]
naniar::miss_var_table(sel)
places[is.na(place$city) && is.na(places$town)]
places[is.na(places$city) && is.na(places$town)]
places[is.na(places$city) && is.na(places$town),]
places[is.na(places$city) & is.na(places$town),]
wo_city_town <- places[is.na(places$city) & is.na(places$town),]
naniar::miss_summary(wo_city_town)
naniar::miss_summary(wo_city_town) |> purrr::map(., view)
naniar::miss_summary(wo_city_town) |> purrr::map(.x, view)
naniar::miss_summary(wo_city_town) |> purrr::map(view)
class(View())
miss_summ <- naniar::miss_summary(wo_city_town)
View(miss_summ)
View(miss_summ[[4]][[1]])
View(miss_summ[[5]][[1]])
View(miss_summ[[6]][[1]])
sel <-places[c("county","town","city")]
head(sel)
View(UFO)
head(sel,100)
View(wo_city_town)
View(miss_summ[[7]][[1]])
View(miss_summ[[4]][[1]])
miss_summ <- naniar::miss_summary(places)
View(miss_summ)
View(miss_summ[[4]][[1]])
View(miss_summ[[5]][[1]])
naniar::gg_miss_case(places)
naniar::gg_miss_case(iris)
naniar::gg_miss_case(pedestrian)
data(naniar::pedestrian)
naniar::pedestrian
naniar::pedestrian -> pedestrian
naniar::gg_miss_case(pedestrian)
wo_city_town_county <- places[is.na(county)& is.na(places$city) & is.na(places$town),]
wo_city_town_county <- places[is.na(places$county)& is.na(places$city) & is.na(places$town),]
View(wo_city_town_county)
summary(wo_city_town_county)
naniar::miss_var_which(wo_city_town_county)
naniar::miss_var_summary(wo_city_town_county)
naniar::miss_var_summary(wo_city_town_county) |> View("wo_city_town_or_county")
wo_city_town_county[is.na(wo_city_town_county$country),] |> View()
places |> table(.$country)
table(places$country)
sort(table(places$country))
htmlTable::htmlTable(sort(table(places$country)))
knitr::kable(sort(table(places$country)))
knitr::kable(sort(table(places$country), decreasing = TRUE))
table(places$country)
sort(table(places$country), decreasing = TRUE)
knitr::kable(sort(table(places$country), decreasing = TRUE))
tibble::tibble(sort(table(places$country), decreasing = TRUE))
ftable(sort(table(places$country), decreasing = TRUE))
Titanic
dim(Titanic)
ftable(sort(table(places$country), decreasing = TRUE), row.vars = 1)
ftable(sort(table(places$country), decreasing = TRUE), row.vars = 2)
ftable(sort(table(places$country), decreasing = TRUE), row.vars = 1, col.vars = "Country")
ftable(sort(table(places$country), decreasing = TRUE), row.vars = 1, col.vars = 1)
ftable(sort(table(places$country), decreasing = TRUE),  col.vars = 1)
ftable(sort(table(places$country), decreasing = TRUE))
ftable(sort(table(places$country), decreasing = TRUE), row.vars = "Italy")
ftable(sort(table(places$country), decreasing = TRUE), row.vars = "France")
install.packages("gt")
?gt
as.data.frame(table(places$country), decreasing = TRUE)
table(places$country), decreasing = TRUE)
sort(table(places$country), decreasing = TRUE))
sort(table(places$country), decreasing = TRUE)
which(places$country == "Italy")
which(places$country == "Italia")
which(places$country == "Italia") ->it
UFO[it,]
UFO[it,] |> View("italia")
UFO[it,] |> .$description
UFO[it,]$description
naniar::gg_miss_case(UFO)
naniar::miss_var_summary(UFO)
shiny::runApp()
runApp()
load("C:/Users/teore/OneDrive/RProjects/UFO_sightings/UFO.RData")
View(UFO)
shiny::runApp()
places <- purrr::map_df(dir(pattern = "places\\d"), read.csv)
library(sf)
?sf
library(tmap)
library(ggplot2)
map
data("World")
View(World)
library(ggplot2)
load("C:/Users/teore/OneDrive/RProjects/UFO_sightings/UFO.RData")
ggplot(UFO, aes(lon, lat)) + geom_point()
plot(lon, lat, data = UFO)
plot(x = lon, y = lat, data = UFO)
plot(lon ~ lat, data = UFO)
get_map("World") + ggplot(UFO, aes(lon, lat)) + geom_point(alpha = 0.5)
library(ggmap)
register_google(rstudioapi::askForSecret('GmapsAPI'))
get_map("World") + ggplot(UFO, aes(lon, lat)) + geom_point(alpha = 0.5)
wm <- get_map("World") +
ggplot(UFO, aes(lon, lat)) + geom_point(alpha = 0.5)
wm <- get_map("World")
wm <- get_map("Earth")
wm <- get_map("NY")
tm_shape(World)+
tm_basemap()
tm_shape(World)
tm_shape(World)+
tm_polygons()
View(World)
View(UFO)
tmap_tip()
library(mapsf)
mtq <- mf_get_mtq()
mapsf::mf_worldmap(mtq)
mapsf::mf_map(mtq)
library(maps)
world_map <- map_data("world")
plot(world_map)
ggplot() +
geom_polygon(data = world_map, aes(lon,lat)) +
geom_point(UFO, aes(lon, lat), alpha = 0.5)
ggplot() +
geom_polygon(data = world_map, aes(lon,lat)) +
geom_point(data = UFO, aes(lon, lat), alpha = 0.5)
View(UFO)
View(world_map)
ggplot() +
geom_polygon(data = world_map, aes(long,lat)) +
geom_point(data = UFO, aes(lon, lat), alpha = 0.5)
ggplot() +
geom_polygon(data = world_map, aes(long,lat))
ggplot() +
geom_polygon(data = world_map, aes(long,lat, group = group))
colorspace::choose_palette()
colorspace::choose_color()
ggplot() +
geom_polygon(data = world_map, aes(long,lat, group = group), fill ="#F7D6C4" ) +
+ geom_point(data = UFO, aes(lon, lat), alpha = 0.5)
ggplot() +
geom_polygon(data = world_map, aes(long,lat, group = group), fill ="#F7D6C4" ) +
geom_point(data = UFO, aes(lon, lat), alpha = 0.5)
ggplot() +
geom_polygon(data = world_map, aes(long,lat, group = group), fill ="#F7D6C4" ) +
geom_point(data = UFO, aes(lon, lat), alpha = 0.5, size = 0.1)
